import logging

import numpy as np

from rag_demo.data_loader import load_documents
from rag_demo.embedder import Embedder
from rag_demo.generator import Generator
from rag_demo.interface import build_ui
from rag_demo.retriever import Retriever

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def main() -> None:
    """
    Entry point for the RAG pipeline. Loads or creates embeddings,
    initializes components, and launches the Gradio interface.
    """
    try:
        embedder = Embedder()

        # Try to load cached index
        if embedder.load_index():
            index, docs = embedder.get_index_and_docs()
            retriever = Retriever(np.array([]))  # Placeholder
            retriever.index = index
            retriever.add_docs(docs)
            logger.info("Using cached FAISS index and docs.")
        else:
            logger.info("No cache found or content changed. Recomputing embeddings...")
            docs = load_documents("docs", chunk_size=80, overlap=20)
            embeddings = embedder.encode(docs)
            embedder.save_index(embeddings, docs)
            retriever = Retriever(embeddings)
            retriever.add_docs(docs)

        generator = Generator()

        def rag_pipeline(question: str) -> str:
            """
            Pipeline to handle incoming user queries.

            Args:
                question (str): Natural language user question.

            Returns:
                str: Answer generated by the model.
            """
            query_embedding = embedder.encode([question])
            context_chunks = retriever.retrieve(query_embedding)

            logger.info(
                f"Retrieved {len(context_chunks)} chunks for query: '{question}'"
            )
            context = " ".join(context_chunks)
            return generator.generate(context, question)

        ui = build_ui(rag_pipeline)
        ui.launch()

    except Exception as e:
        logger.error("Fatal error during app execution.", exc_info=True)


if __name__ == "__main__":
    main()
